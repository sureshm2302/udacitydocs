{
	"name": "df_Summary",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sqldb_payrollhist",
						"type": "DatasetReference"
					},
					"name": "SqldbPayroll2020"
				},
				{
					"dataset": {
						"referenceName": "ds_sqldb_payroll2021",
						"type": "DatasetReference"
					},
					"name": "SqldbPayroll2021"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sqldb_summary",
						"type": "DatasetReference"
					},
					"name": "sinkSqlSummary"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_dirstage",
						"type": "DatasetReference"
					},
					"name": "dirstaging"
				}
			],
			"transformations": [
				{
					"name": "unPayroll"
				},
				{
					"name": "selPayroll2020"
				},
				{
					"name": "filFiscalYear"
				},
				{
					"name": "derTotalPaid"
				},
				{
					"name": "aggTotalPaid"
				}
			],
			"scriptLines": [
				"parameters{",
				"     dataflow_param_fiscalyear as integer (2020)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SqldbPayroll2020",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyCode as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SqldbPayroll2021",
				"SqldbPayroll2020, selPayroll2020 union(byName: false)~> unPayroll",
				"SqldbPayroll2021 select(mapColumn(",
				"          FiscalYear,",
				"          PayrollNumber,",
				"          AgencyId = AgencyCode,",
				"          AgencyName,",
				"          EmployeeID,",
				"          LastName,",
				"          FirstName,",
				"          AgencyStartDate,",
				"          WorkLocationBorough,",
				"          TitleCode,",
				"          TitleDescription,",
				"          LeaveStatusasofJune30,",
				"          BaseSalary,",
				"          PayBasis,",
				"          RegularHours,",
				"          RegularGrossPaid,",
				"          OTHours,",
				"          TotalOTPaid,",
				"          TotalOtherPay",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selPayroll2020",
				"unPayroll filter(toInteger(FiscalYear) >= $dataflow_param_fiscalyear) ~> filFiscalYear",
				"filFiscalYear derive(TotalPaid = RegularGrossPaid + TotalOTPaid+TotalOtherPay) ~> derTotalPaid",
				"derTotalPaid aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     SumPaid = sum(TotalPaid)) ~> aggTotalPaid",
				"aggTotalPaid sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          FiscalYear,",
				"          AgencyName,",
				"          TotalPaid = SumPaid",
				"     )) ~> sinkSqlSummary",
				"aggTotalPaid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['PayrollSummary.csv'],",
				"     truncate: true,",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          FiscalYear,",
				"          AgencyName,",
				"          TotalPaid = SumPaid",
				"     ),",
				"     partitionBy('hash', 1)) ~> dirstaging"
			]
		}
	}
}